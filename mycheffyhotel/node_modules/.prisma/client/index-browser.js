
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.7.0
 * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
 */
Prisma.prismaVersion = {
  client: "3.7.0",
  engine: "8746e055198f517658c08a0c426c7eec87f5a85f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.HotelScalarFieldEnum = makeEnum({
  id: 'id',
  ownerId: 'ownerId',
  name: 'name',
  description: 'description',
  imageurl: 'imageurl',
  pricePerUnitTime: 'pricePerUnitTime',
  openingTime: 'openingTime',
  closingTime: 'closingTime',
  daysOpen: 'daysOpen',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  phoneNumber: 'phoneNumber',
  latitude: 'latitude',
  longitude: 'longitude',
  hotelId: 'hotelId'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  hotelId: 'hotelId',
  asset_id: 'asset_id',
  public_id: 'public_id',
  url: 'url',
  secure_url: 'secure_url'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  hotelId: 'hotelId',
  start: 'start',
  end: 'end',
  startStr: 'startStr',
  endStr: 'endStr',
  status: 'status',
  paymentStatus: 'paymentStatus'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Status = makeEnum({
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED'
});

exports.PaymentStatus = makeEnum({
  PENDING: 'PENDING',
  PAID: 'PAID'
});

exports.Prisma.ModelName = makeEnum({
  hotel: 'hotel',
  Address: 'Address',
  Image: 'Image',
  Booking: 'Booking'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
